#!/usr/bin/python
#
# mdplot - Molecular Dynamics simulation plotter
#
# Copyright (C) 2008  Peter Colberg <peter.colberg@physik.uni-muenchen.de>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

import argparse
from matplotlib import rc
import matplotlib
from mdplot import *
import mdplot
import sys

def main():
    # parse command line arguments
    args = parse_args()

    # set matplotlib defaults
    rc('font', family='serif', serif=['Computer Modern Roman'])
    rc('text', usetex=True)
    if args.a4:
        rc('figure', figsize=[11.7, 8.3])

    # set matplotlib backend
    if args.output is None:
        matplotlib.use('GTKAgg')
    else:
        matplotlib.use('Agg')

    # execute plot command
    try:
        plots[args.command].plot(args)

    except SystemExit, status:
        exit('ERROR: %s' % status)


plots = dict([(m, sys.modules['mdplot.%s' % m]) for m in mdplot.__all__])

def parse_args():
    parser = argparse.ArgumentParser(prog='mdplot')
    parser.add_argument('--output', help='output filename')
    parser.add_argument('--a4', action="store_true", help='DIN A4 format')
    parser.add_argument('--dpi', type=float, help='resolution in dots per inch')
    parser.add_argument('--colors', nargs='+', help='plot colors')
    parser.add_argument('--label', help='legend label format')
    parser.add_argument('--title', help='plot title format')
    parser.set_defaults(dpi=300, colors=['magenta', 'blue', 'cyan', 'green', 'orange', 'red', 'black', 'grey', 'brown'])

    subparsers = parser.add_subparsers(dest='command', help='available plot modules')
    for plot in plots.itervalues():
        plot.add_parser(subparsers)

    return parser.parse_args()


if __name__ == "__main__":
    main()

